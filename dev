let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <Plug>ClojureReplDownHistory :call b:vimclojure_repl.downHistory()
inoremap <Plug>ClojureReplUpHistory :call b:vimclojure_repl.upHistory()
inoremap <Plug>ClojureReplEnterHook :call b:vimclojure_repl.enterHook()
imap <M-Down> }
inoremap <D-Down> <C-End>
imap <M-Up> {
inoremap <D-Up> <C-Home>
noremap! <M-Right> <C-Right>
noremap! <D-Right> <End>
noremap! <M-Left> <C-Left>
noremap! <D-Left> <Home>
inoremap <silent> <S-Tab> =BackwardsSnippet()
inoremap <silent> <SNR>68_yrrecord =YRRecord3()
inoremap <Plug>(fakeclip-screen-insert-p) =fakeclip#content('screen')
noremap! <Plug>(fakeclip-screen-insert-o) =fakeclip#content('screen')
noremap! <Plug>(fakeclip-screen-insert-r) =fakeclip#content('screen')
noremap! <Plug>(fakeclip-screen-insert) =fakeclip#content('screen')
inoremap <Plug>(fakeclip-insert-p) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-o) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-r) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert) =fakeclip#content('clipboard')
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
inoremap <F2> o:Ve %:h:vertical resize 30li
map! <D-v> *
snoremap <silent> 	 i<Right>=TriggerSnippet()
map <NL> j_
map  k_
nnoremap <silent>  :YRReplace '1', 'p'
nnoremap <silent>  :YRReplace '-1', 'P'
vmap  <Plug>TwitvimVisual
nnoremap <silent>  :FufAddBookmark
snoremap  b<BS>
nnoremap <silent> 	 :FufFunction
nnoremap <silent>  :FufQuickfix
nnoremap <silent>  :FufChangeList
nnoremap <silent> <NL> :FufJumpList
nnoremap <silent>  :FufTaggedFile
nnoremap <silent>  :FufTag
nnoremap <silent>  :FufBookmark
nnoremap <silent>  :FufMruCmd
nnoremap <silent>  :FufMruFile
nnoremap <silent>  :FufBuffer
noremap  tH
noremap  :exe "ruby p " . getline(".")
noremap  g}
vmap "&[P <Plug>(fakeclip-screen-[P)
vmap "&[p <Plug>(fakeclip-screen-[p)
vmap "&]P <Plug>(fakeclip-screen-]P)
vmap "&]p <Plug>(fakeclip-screen-]p)
vmap "&gP <Plug>(fakeclip-screen-gP)
vmap "&gp <Plug>(fakeclip-screen-gp)
vmap "&P <Plug>(fakeclip-screen-P)
vmap "&p <Plug>(fakeclip-screen-p)
nmap "&[P <Plug>(fakeclip-screen-[P)
nmap "&[p <Plug>(fakeclip-screen-[p)
nmap "&]P <Plug>(fakeclip-screen-]P)
nmap "&]p <Plug>(fakeclip-screen-]p)
nmap "&gP <Plug>(fakeclip-screen-gP)
nmap "&gp <Plug>(fakeclip-screen-gp)
nmap "&P <Plug>(fakeclip-screen-P)
nmap "&p <Plug>(fakeclip-screen-p)
vmap "&Y <Plug>(fakeclip-screen-Y)
vmap "&y <Plug>(fakeclip-screen-y)
nmap "&yy <Plug>(fakeclip-screen-Y)
nmap "&Y <Plug>(fakeclip-screen-Y)
nmap "&y <Plug>(fakeclip-screen-y)
snoremap % b<BS>%
snoremap ' b<BS>'
nmap ,ca <Plug>NERDCommenterAltDelims
vmap ,cA <Plug>NERDCommenterAppend
nmap ,cA <Plug>NERDCommenterAppend
vmap ,c$ <Plug>NERDCommenterToEOL
nmap ,c$ <Plug>NERDCommenterToEOL
vmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
vmap ,cn <Plug>NERDCommenterNest
nmap ,cn <Plug>NERDCommenterNest
vmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
vmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
vmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
vmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
vmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
vmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
vmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
vmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
xnoremap <silent> P :YRPaste 'P', 'v'
nnoremap <silent> P :YRPaste 'P'
map Q gq
xmap S <Plug>VSurround
snoremap U b<BS>U
vmap [% [%m'gv``
nnoremap <silent> \t :call FufAllFiles()
vmap \t :FuzzyFinderTextMate
omap \t :FuzzyFinderTextMate
snoremap \ b<BS>\
nmap <silent> \cv <Plug>VCSVimDiff
nmap <silent> \cu <Plug>VCSUpdate
nmap <silent> \cU <Plug>VCSUnlock
nmap <silent> \cs <Plug>VCSStatus
nmap <silent> \cr <Plug>VCSReview
nmap <silent> \cq <Plug>VCSRevert
nmap <silent> \cn <Plug>VCSAnnotate
nmap <silent> \cN <Plug>VCSSplitAnnotate
nmap <silent> \cl <Plug>VCSLog
nmap <silent> \cL <Plug>VCSLock
nmap <silent> \ci <Plug>VCSInfo
nmap <silent> \cg <Plug>VCSGotoOriginal
nmap <silent> \cG <Plug>VCSClearAndGotoOriginal
nmap <silent> \cd <Plug>VCSDiff
nmap <silent> \cD <Plug>VCSDelete
nmap <silent> \cc <Plug>VCSCommit
nmap <silent> \ca <Plug>VCSAdd
map \rwp <Plug>RestoreWinPosn
map \swp <Plug>SaveWinPosn
nmap <silent> \bv :VSBufExplorer
nmap <silent> \bs :HSBufExplorer
nmap <silent> \be :BufExplorer
map \tt <Plug>AM_tt
map \tsq <Plug>AM_tsq
map \tsp <Plug>AM_tsp
map \tml <Plug>AM_tml
map \tab <Plug>AM_tab
map \m= <Plug>AM_m=
map \t@ <Plug>AM_t@
map \t~ <Plug>AM_t~
map \t? <Plug>AM_t?
map \w= <Plug>AM_w=
map \ts= <Plug>AM_ts=
map \ts< <Plug>AM_ts<
map \ts; <Plug>AM_ts;
map \ts: <Plug>AM_ts:
map \ts, <Plug>AM_ts,
map \t= <Plug>AM_t=
map \t< <Plug>AM_t<
map \t; <Plug>AM_t;
map \t: <Plug>AM_t:
map \t, <Plug>AM_t,
map \t# <Plug>AM_t#
map \t| <Plug>AM_t|
map \T~ <Plug>AM_T~
map \Tsp <Plug>AM_Tsp
map \Tab <Plug>AM_Tab
map \T@ <Plug>AM_T@
map \T? <Plug>AM_T?
map \T= <Plug>AM_T=
map \T< <Plug>AM_T<
map \T; <Plug>AM_T;
map \T: <Plug>AM_T:
map \Ts, <Plug>AM_Ts,
map \T, <Plug>AM_T,o
map \T# <Plug>AM_T#
map \T| <Plug>AM_T|
map \Htd <Plug>AM_Htd
map \anum <Plug>AM_aunum
map \aunum <Plug>AM_aenum
map \afnc <Plug>AM_afnc
map \adef <Plug>AM_adef
map \adec <Plug>AM_adec
map \ascom <Plug>AM_ascom
map \aocom <Plug>AM_aocom
map \adcom <Plug>AM_adcom
map \acom <Plug>AM_acom
map \abox <Plug>AM_abox
map \a( <Plug>AM_a(
map \a= <Plug>AM_a=
map \a< <Plug>AM_a<
map \a, <Plug>AM_a,
map \a? <Plug>AM_a?
map \c :echo g:colors_name
map \p :CP
map \n :CN
vmap ]% ]%m'gv``
snoremap ^ b<BS>^
snoremap ` b<BS>`
vmap a% [%v]%
nmap cs <Plug>Csurround
xnoremap <silent> d :YRDeleteRange 'v'
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> gp :YRPaste 'gp'
nnoremap <silent> gP :YRPaste 'gP'
noremap <silent> g] :FufTagWithCursorWord!
xnoremap <silent> p :YRPaste 'p', 'v'
nnoremap <silent> p :YRPaste 'p'
xmap s <Plug>Vsurround
xnoremap <silent> x :YRDeleteRange 'v'
xnoremap <silent> y :YRYankRange 'v'
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <Plug>ClojureClosePreview :pclose!
nnoremap <Plug>ClojureStartRepl :call vimclojure#Repl.New()
nnoremap <Plug>ClojureEvalParagraph :call vimclojure#EvalParagraph()
nnoremap <Plug>ClojureEvalToplevel :call vimclojure#EvalToplevel()
vnoremap <Plug>ClojureEvalBlock :call vimclojure#EvalBlock()
nnoremap <Plug>ClojureEvalLine :call vimclojure#EvalLine()
nnoremap <Plug>ClojureEvalFile :call vimclojure#EvalFile()
nnoremap <Plug>ClojureMacroExpand1 :call vimclojure#MacroExpand(1)
nnoremap <Plug>ClojureMacroExpand :call vimclojure#MacroExpand(0)
nnoremap <Plug>ClojureRequireFileAll :call vimclojure#RequireFile(1)
nnoremap <Plug>ClojureRequireFile :call vimclojure#RequireFile(0)
nnoremap <Plug>ClojureGotoSourceInteractive :call vimclojure#GotoSource(input("Symbol to go to: "))
nnoremap <Plug>ClojureGotoSourceWord :call vimclojure#GotoSource(expand("<cword>"))
nnoremap <Plug>ClojureSourceLookupInteractive :call vimclojure#SourceLookup(input("Symbol to look up: "))
nnoremap <Plug>ClojureSourceLookupWord :call vimclojure#SourceLookup(expand("<cword>"))
nnoremap <Plug>ClojureMetaLookupInteractive :call vimclojure#MetaLookup(input("Symbol to look up: "))
nnoremap <Plug>ClojureMetaLookupWord :call vimclojure#MetaLookup(expand("<cword>"))
nnoremap <Plug>ClojureFindDoc :call vimclojure#FindDoc())
nnoremap <Plug>ClojureJavadocLookupInteractive :call vimclojure#JavadocLookup(input("Class to lookup: "))
nnoremap <Plug>ClojureJavadocLookupWord :call vimclojure#JavadocLookup(expand("<cword>"))
nnoremap <Plug>ClojureDocLookupInteractive :call vimclojure#DocLookup(input("Symbol to look up: "))
nnoremap <Plug>ClojureDocLookupWord :call vimclojure#DocLookup(expand("<cword>"))
map <M-Down> }
noremap <D-Down> <C-End>
map <M-Up> {
noremap <D-Up> <C-Home>
noremap <M-Right> <C-Right>
noremap <D-Right> <End>
noremap <M-Left> <C-Left>
noremap <D-Left> <Home>
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <SNR>68_yrrecord :call YRRecord3()
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
vnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('screen', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('screen', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('screen', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('screen', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('screen', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('screen', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('screen', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('screen', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('screen', '', '[P')
nnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('screen', '', '[p')
nnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('screen', '', ']P')
nnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('screen', '', ']p')
nnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('screen', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('screen', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('screen', '', 'P')
nnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('screen', '', 'p')
vnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank('screen', 'V')
nnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank_Y('screen')
vnoremap <silent> <Plug>(fakeclip-screen-y) :call fakeclip#yank('screen', visualmode())
nnoremap <silent> <Plug>(fakeclip-screen-y) :set operatorfunc=fakeclip#screen_yankg@
vnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', '', '[P')
nnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', '', '[p')
nnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', '', ']P')
nnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', '', ']p')
nnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', '', 'P')
nnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', '', 'p')
vnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank('clipboard', 'V')
nnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank_Y('clipboard')
vnoremap <silent> <Plug>(fakeclip-y) :call fakeclip#yank('clipboard', visualmode())
nnoremap <silent> <Plug>(fakeclip-y) :set operatorfunc=fakeclip#clipboard_yankg@
nmap <silent> <Plug>RestoreWinPosn :call RestoreWinPosn()
nmap <silent> <Plug>SaveWinPosn :call SaveWinPosn()
nmap <SNR>20_WE <Plug>AlignMapsWrapperEnd
map <SNR>20_WS <Plug>AlignMapsWrapperStart
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
noremap <D-P> :FuzzyFinderTag
nnoremap <D-CR> o 
noremap <F4> :TlistClose
noremap <F6> :tabnew ~/.vimrc
noremap <F5> :BufExplorer
noremap <F3> :TlistOpen
noremap <F2> o:Ve:vertical resize 30
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
inoremap <silent> 	 =ShowAvailableSnips()
imap & <Plug>(fakeclip-screen-insert-p)
map! & <Plug>(fakeclip-screen-insert-o)
map! & <Plug>(fakeclip-screen-insert-r)
map! & <Plug>(fakeclip-screen-insert)
imap  <Plug>Isurround
inoremap  \lwli
inoremap  :exe getline(".")li
inoremap  g}li
vmap ô <Plug>TwitvimVisual
cnoremap vsb vert sb
cnoremap vh vert h
let &cpo=s:cpo_save
unlet s:cpo_save
set background=dark
set backspace=indent,eol,start
set fileencodings=ucs-bom,utf-8,default,latin1
set guifont=Monaco:h11
set guioptions=aegtc
set helplang=en
set hidden
set history=50
set ignorecase
set incsearch
set lispwords=def,def-,defn,defn-,defmacro,defmacro-,defmethod,defmulti,defonce,defvar,defvar-,defunbound,let,fn,letfn,binding,proxy,defnk,if,if-not,if-let,when,when-not,when-let,when-first,cond,condp,loop,dotimes,for,while,do,doto,try,catch,locking,with-in-str,with-out-str,with-open,dosync,with-local-vars,doseq,dorun,doall,->,future,ns,clojure.core/ns,gen-class,gen-interface
set mouse=a
set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
set ruler
set runtimepath=~/.vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,~/.vim/after,~/.vim/vimclojure-2.1.2,~/.vim/eclim,~/.vim/eclim/after
set shiftwidth=4
set showcmd
set smartcase
set splitright
set tabstop=4
set termencoding=utf-8
set transparency=10
set visualbell
set wildmode=list:longest
set window=54
set winminheight=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/.vim
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +157 ~/.vimrc
badd +70 plugin/support.vim
badd +1 plugin/ruby.vim
badd +45 plugin/fufunction.vim
args [BufExplorer]
edit plugin/fufunction.vim
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 26 + 27) / 55)
exe '2resize ' . ((&lines * 25 + 27) / 55)
argglobal
edit /Applications/MacVim.app/Contents/Resources/vim/runtime/doc/starting.txt
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal nobinary
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=help
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'help'
setlocal filetype=help
endif
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcroql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=!-~,^*,^|,^\",192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'help'
setlocal syntax=help
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1174 - ((0 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1174
normal! 06l
lcd ~/.vim
wincmd w
argglobal
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal winfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 45 - ((20 * winheight(0) + 12) / 25)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
45
normal! 0
lcd ~/.vim
wincmd w
exe '1resize ' . ((&lines * 26 + 27) / 55)
exe '2resize ' . ((&lines * 25 + 27) / 55)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . s:sx
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
